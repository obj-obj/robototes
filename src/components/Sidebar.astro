---
import type { MarkdownHeading } from "astro";

export interface Props {
	headings: MarkdownHeading[];
	pages: Record<string, any>[];
}
const { pages, headings } = Astro.props;

function isCurrent(url: string) {
	return url == Astro.url.pathname || url + "/" == Astro.url.pathname;
}
---

<style>
	div {
		@apply ml-5 mr-5 mt-10 flex h-min max-h-[calc(100vh-2rem)] flex-col overflow-scroll rounded border border-slate-500 bg-secondary text-lg lg:sticky lg:top-16 lg:ml-10 lg:w-1/6;
	}

	p {
		@apply px-2 pt-2 text-sm;
	}

	a {
		@apply h-max w-full rounded p-2 hover:bg-black/25;
	}
</style>

<div>
	<p>Pages</p>
	<hr />
	{
		pages.map((page) => (
			<a class={`${isCurrent(page.url) ? " bg-black/25" : ""}`} href={page.url}>
				{page.frontmatter.title}
			</a>
		))
	}

	{
		headings.length > 0 && (
			<>
				<p>Contents</p>
				<hr />
			</>
		)
	}
	{
		headings.map((heading) => (
			<a
				class={`${
					heading.depth > 1
						? heading.depth > 2
							? heading.depth > 3
								? " text-xs"
								: " text-sm"
							: " text-base"
						: ""
				}`}
				href={`#${heading.slug}`}
			>
				{heading.text}
			</a>
		))
	}
</div>
